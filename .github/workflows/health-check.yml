name: Health Check and OCI Instance Restart

on:
  schedule:
    - cron: '30 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup OCI CLI and Key
      run: |
        echo "Installing OCI CLI..."
        curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh -o install-oci-cli.sh
        bash install-oci-cli.sh --accept-all-defaults
        echo "$HOME/bin" >> $GITHUB_PATH

        echo "Creating OCI directory and files..."
        mkdir -p ~/.oci

        # Criar arquivo de configuração diretamente com os valores das secrets
        cat > ~/.oci/config << EOF
        [DEFAULT]
        user=${{ secrets.OCI_USER_OCID }}
        fingerprint=${{ secrets.OCI_FINGERPRINT }}
        tenancy=${{ secrets.OCI_TENANCY_OCID }}
        region=${{ secrets.OCI_REGION }}
        key_file=/home/runner/.oci/oci_api_key.pem
        EOF

        # Criar arquivo de chave privada diretamente com o valor da secret
        cat > /home/runner/.oci/oci_api_key.pem << EOF
        ${{ secrets.OCI_KEY_FILE }}
        EOF
        
        # Corrigir permissões
        chmod 600 /home/runner/.oci/oci_api_key.pem
        chmod 600 ~/.oci/config

        # Adicionar label OCI_API_KEY para suprimir aviso
        echo "OCI_API_KEY" >> /home/runner/.oci/oci_api_key.pem

        # Debug: Mostrar conteúdo do arquivo de configuração (sem expor valores sensíveis)
        echo "Config file content (redacted):"
        sed 's/=.*$/=[REDACTED]/' ~/.oci/config
        echo -e "\nKey file exists: $(test -f /home/runner/.oci/oci_api_key.pem && echo 'Yes' || echo 'No')"
        echo "Key file size: $(wc -c < /home/runner/.oci/oci_api_key.pem) bytes"

    - name: Verify OCI Configuration
      run: |
        oci --version
        oci iam region list

    - name: Run Health Check Script
      run: |
        chmod +x health-check.sh
        ./health-check.sh
      env:
        NODE1_INSTANCE_ID: ${{ secrets.NODE1_INSTANCE_ID }}
        NODE2_INSTANCE_ID: ${{ secrets.NODE2_INSTANCE_ID }}

    - name: Upload Logs on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: healthcheck-logs
        path: logs/